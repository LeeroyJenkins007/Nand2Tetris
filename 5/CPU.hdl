// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:


    Not(in= instruction[15], out= NopCode);
    //a = outALU
    Mux16(a= instruction, b= outALU, sel= instruction[15], out= outAReg);

    //A Register
    //not i, and d1 into mux, select on i
    Or(a= NopCode, b= instruction[5], out= loadA);
    ARegister(in= outAReg, load= loadA, out= AOut, out[0..14] = addressM);

    Mux16(a= AOut, b= inM, sel= instruction[12], out= outBotALU);

    //D Register
    And(a= instruction[15], b= instruction[4], out= loadD);
    DRegister(in= outALU, load = loadD, out= DOut);

	ALU(x= DOut, y= outBotALU, zx= instruction[11], 
        nx= instruction[10], zy= instruction[9], 
        ny= instruction[8], f= instruction[7], 
        no= instruction[6], out= outALU, out = outM,
        zr= zrOut, ng= ngOut);

    
    And(a= instruction[3], b= instruction[15], out= writeM);

    And(a= ngOut, b= instruction[2], out= jlt);
    And(a= zrOut, b= instruction[1], out= jeq);

    Or(a= ngOut, b= zrOut, out= notPos);
    Not(in= notPos, out= pos);
    And(a= pos, b= instruction[0], out= jgt);

    Or(a= jeq, b= jlt, out= jle);
    Or(a= jle, b= jgt, out= jmp);

    And(a= instruction[15], b= jmp, out= PCload);
    Not(in= PCload, out= PCinc);


    PC(in= AOut, load= PCload, inc= PCinc, reset= reset, out[0..14]= pc);
}