// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15]; 
    OUT out[16];

    PARTS:
    //selecting GP or Dedicated
    DMux(in= load, sel= address[14], a= GPRAM, b= dedicatedRAM);
    DMux(in= dedicatedRAM, sel= address[13], a= scrnLoad, b= no);

    // Main portion of the memory, dedicated use to general purpose work
    // RAM16k 0x0000 - 0x3FFF = 0 - 16383
    // Memory block: 0x000 - 0x3FFF
	RAM16K(in= in, load= GPRAM, address= address[0..13], out= outGP);

    // dedicated region for screen 0x4000 - 0x5FFF = 16384 - 24575
    // creating 8K chip here to act as the Screen chunk
    Screen(in= in, load= scrnLoad, address= address[0..12], out= scrnOut);

    // Keyboard register 0x6000 = 24576
    Keyboard(out= kOut);
    Or8Way(in=address[0..7], out=notkbd1);
  	Or8Way(in[0..4]=address[8..12], in[5..7]=false, out=notkbd2);
  	Or(a=notkbd1,b=notkbd2,out=notkbd);
  	Mux16(a=kOut,b=false,sel=notkbd,out=keyOut);

    Mux16(a= scrnOut, b= keyOut, sel= address[13], out= outsk);
    Mux16(a= outGP, b= outsk, sel= address[14], out= out);
    
}